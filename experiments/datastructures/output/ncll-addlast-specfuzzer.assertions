===========================================================================
DataStructures.commonscollections.NodeCachingLinkedList:::OBJECT
this.header.previous.value.getClass().getName() == this.header.next.value.getClass().getName()
FuzzedInvariant ( #(NodeCachingLinkedList.firstCachedNode.*(next)) != 0 ) holds for: this
FuzzedInvariant ( #(NodeCachingLinkedList.firstCachedNode.*(next)) > 0 ) holds for: this
FuzzedInvariant ( #(NodeCachingLinkedList.firstCachedNode.*(previous + next)) > #(NodeCachingLinkedList.firstCachedNode.^(previous + next)) + 0 ) holds for: this
FuzzedInvariant ( #(NodeCachingLinkedList.firstCachedNode.*(previous + next)) > #(NodeCachingLinkedList.firstCachedNode.^(previous)) - #(NodeCachingLinkedList.header.*(previous + next)) ) holds for: this
FuzzedInvariant ( #(NodeCachingLinkedList.firstCachedNode.*(previous + next)) > 0 ) holds for: this
FuzzedInvariant ( #(NodeCachingLinkedList.firstCachedNode.*(previous + next)) >= 0 ) holds for: this
FuzzedInvariant ( #(NodeCachingLinkedList.firstCachedNode.*(previous)) != 0 ) holds for: this
FuzzedInvariant ( #(NodeCachingLinkedList.firstCachedNode.*(previous)) <= #(NodeCachingLinkedList.firstCachedNode.^(previous + next)) + 1 ) holds for: this
FuzzedInvariant ( #(NodeCachingLinkedList.firstCachedNode.*(previous)) >= 1 ) holds for: this
FuzzedInvariant ( #(NodeCachingLinkedList.firstCachedNode.^(previous + next)) <= NodeCachingLinkedList.cacheSize + #(NodeCachingLinkedList.header.*(previous + next)) ) holds for: this
FuzzedInvariant ( #(NodeCachingLinkedList.firstCachedNode.^(previous + next)) >= #(NodeCachingLinkedList.header.^(next)) - #(NodeCachingLinkedList.header.*(previous + next)) ) holds for: this
FuzzedInvariant ( #(NodeCachingLinkedList.firstCachedNode.^(previous)) != 1 ) holds for: this
FuzzedInvariant ( #(NodeCachingLinkedList.firstCachedNode.^(previous)) <= 0 ) holds for: this
FuzzedInvariant ( #(NodeCachingLinkedList.firstCachedNode.^(previous)) = 0 ) holds for: this
FuzzedInvariant ( #(NodeCachingLinkedList.firstCachedNode.^(previous)) >= 0 ) holds for: this
FuzzedInvariant ( #(NodeCachingLinkedList.header.*(next)) != #(NodeCachingLinkedList.firstCachedNode.^(previous)) ) holds for: this
FuzzedInvariant ( #(NodeCachingLinkedList.header.*(next)) <= NodeCachingLinkedList.size + #(NodeCachingLinkedList.firstCachedNode.*(next)) ) holds for: this
FuzzedInvariant ( #(NodeCachingLinkedList.header.*(next)) >= #(NodeCachingLinkedList.firstCachedNode.^(next)) - NodeCachingLinkedList.cacheSize ) holds for: this
FuzzedInvariant ( #(NodeCachingLinkedList.header.*(next)) >= #(NodeCachingLinkedList.header.*(previous + next)) - 0 ) holds for: this
FuzzedInvariant ( #(NodeCachingLinkedList.header.*(next)) >= #(NodeCachingLinkedList.header.^(previous)) ) holds for: this
FuzzedInvariant ( #(NodeCachingLinkedList.header.*(previous + next)) >= #(NodeCachingLinkedList.firstCachedNode.*(previous)) - #(NodeCachingLinkedList.header.^(previous + next)) ) holds for: this
FuzzedInvariant ( #(NodeCachingLinkedList.header.*(previous + next)) >= #(NodeCachingLinkedList.firstCachedNode.^(previous)) - NodeCachingLinkedList.size ) holds for: this
FuzzedInvariant ( #(NodeCachingLinkedList.header.*(previous + next)) >= 1 ) holds for: this
FuzzedInvariant ( #(NodeCachingLinkedList.header.^(next)) != NodeCachingLinkedList.maximumCacheSize - 1 ) holds for: this
FuzzedInvariant ( #(NodeCachingLinkedList.header.^(next)) >= #(NodeCachingLinkedList.header.^(previous)) - 1 ) holds for: this
FuzzedInvariant ( #(NodeCachingLinkedList.header.^(previous + next)) != 0 ) holds for: this
FuzzedInvariant ( #(NodeCachingLinkedList.header.^(previous + next)) > NodeCachingLinkedList.size ) holds for: this
FuzzedInvariant ( #(NodeCachingLinkedList.header.^(previous + next)) >= #(NodeCachingLinkedList.header.*(previous)) - #(NodeCachingLinkedList.firstCachedNode.*(previous + next)) ) holds for: this
FuzzedInvariant ( #(NodeCachingLinkedList.header.^(previous + next)) >= #(NodeCachingLinkedList.header.^(previous + next)) ) holds for: this
FuzzedInvariant ( #(NodeCachingLinkedList.header.^(previous + next)) >= NodeCachingLinkedList.size ) holds for: this
FuzzedInvariant ( #(NodeCachingLinkedList.header.^(previous)) != #(NodeCachingLinkedList.firstCachedNode.*(previous)) - #(NodeCachingLinkedList.firstCachedNode.*(previous)) ) holds for: this
FuzzedInvariant ( #(NodeCachingLinkedList.header.^(previous)) <= NodeCachingLinkedList.size + #(NodeCachingLinkedList.firstCachedNode.*(next)) ) holds for: this
FuzzedInvariant ( #(NodeCachingLinkedList.header.^(previous)) >= 0 ) holds for: this
FuzzedInvariant ( NodeCachingLinkedList.cacheSize <= NodeCachingLinkedList.modCount ) holds for: this
FuzzedInvariant ( NodeCachingLinkedList.maximumCacheSize != #(NodeCachingLinkedList.firstCachedNode.*(previous + next)) + 1 ) holds for: this
FuzzedInvariant ( NodeCachingLinkedList.modCount = NodeCachingLinkedList.modCount ) holds for: this
FuzzedInvariant ( NodeCachingLinkedList.modCount >= 0 ) holds for: this
FuzzedInvariant ( NodeCachingLinkedList.modCount >= NodeCachingLinkedList.size - #(NodeCachingLinkedList.header.*(previous)) ) holds for: this
FuzzedInvariant ( NodeCachingLinkedList.size != NodeCachingLinkedList.size - #(NodeCachingLinkedList.firstCachedNode.*(previous)) ) holds for: this
FuzzedInvariant ( NodeCachingLinkedList.size >= 0 ) holds for: this
FuzzedInvariant ( all n : NodeCachingLinkedList.firstCachedNode.*(previous + next) : n != n.previous.previous ) holds for: this
FuzzedInvariant ( all n : NodeCachingLinkedList.firstCachedNode.*(previous) : n in n.*(previous) ) holds for: this
FuzzedInvariant ( all n : NodeCachingLinkedList.firstCachedNode.*(previous) : n.value = n.next.value ) holds for: this
FuzzedInvariant ( all n : NodeCachingLinkedList.firstCachedNode.*(previous) : n.value = n.previous.value ) holds for: this
FuzzedInvariant ( all n : NodeCachingLinkedList.firstCachedNode.^(next) : n != n.previous ) holds for: this
FuzzedInvariant ( all n : NodeCachingLinkedList.firstCachedNode.^(previous + next) : n != n.previous ) holds for: this
FuzzedInvariant ( all n : NodeCachingLinkedList.firstCachedNode.^(previous + next) : n != null ) holds for: this
FuzzedInvariant ( all n : NodeCachingLinkedList.firstCachedNode.^(previous + next) : n.value = n.next.value ) holds for: this
FuzzedInvariant ( all n : NodeCachingLinkedList.firstCachedNode.^(previous) : n = n.next.next ) holds for: this
FuzzedInvariant ( all n : NodeCachingLinkedList.firstCachedNode.^(previous) : n not in n.*(previous + next) ) holds for: this
FuzzedInvariant ( all n : NodeCachingLinkedList.firstCachedNode.^(previous) : n.value != n.next.value ) holds for: this
FuzzedInvariant ( all n : NodeCachingLinkedList.header.*(next) : n in n.^(previous) ) holds for: this
FuzzedInvariant ( all n : NodeCachingLinkedList.header.*(previous) : n in n.^(next) ) holds for: this
FuzzedInvariant ( all n : NodeCachingLinkedList.header.^(previous + next) : n != null ) holds for: this
FuzzedInvariant ( all n : NodeCachingLinkedList.header.^(previous + next) : n = n.previous.next ) holds for: this
FuzzedInvariant ( lone n : NodeCachingLinkedList.firstCachedNode.*(next) : n = n.previous ) holds for: this
FuzzedInvariant ( lone n : NodeCachingLinkedList.firstCachedNode.*(next) : n = null ) holds for: this
FuzzedInvariant ( lone n : NodeCachingLinkedList.firstCachedNode.*(next) : n in n.^(previous + next) ) holds for: this
FuzzedInvariant ( lone n : NodeCachingLinkedList.firstCachedNode.*(next) : n.value != n.next.value ) holds for: this
FuzzedInvariant ( lone n : NodeCachingLinkedList.firstCachedNode.*(previous + next) : n != n.previous.next ) holds for: this
FuzzedInvariant ( lone n : NodeCachingLinkedList.firstCachedNode.*(previous + next) : n != n.previous.previous ) holds for: this
FuzzedInvariant ( lone n : NodeCachingLinkedList.firstCachedNode.*(previous + next) : n not in n.*(next) ) holds for: this
FuzzedInvariant ( lone n : NodeCachingLinkedList.firstCachedNode.*(previous) : n != n.next.next ) holds for: this
FuzzedInvariant ( lone n : NodeCachingLinkedList.firstCachedNode.*(previous) : n.value = n.previous.value ) holds for: this
FuzzedInvariant ( lone n : NodeCachingLinkedList.firstCachedNode.^(previous + next) : n in n.^(previous) ) holds for: this
FuzzedInvariant ( lone n : NodeCachingLinkedList.firstCachedNode.^(previous + next) : n not in n.*(previous + next) ) holds for: this
FuzzedInvariant ( lone n : NodeCachingLinkedList.firstCachedNode.^(previous) : n = n.previous.next ) holds for: this
FuzzedInvariant ( lone n : NodeCachingLinkedList.firstCachedNode.^(previous) : n not in n.^(previous + next) ) holds for: this
FuzzedInvariant ( lone n : NodeCachingLinkedList.firstCachedNode.^(previous) : n.value = n.previous.value ) holds for: this
FuzzedInvariant ( lone n : NodeCachingLinkedList.header.*(previous + next) : n not in n.^(next) ) holds for: this
FuzzedInvariant ( lone n : NodeCachingLinkedList.header.*(previous + next) : n not in n.^(previous) ) holds for: this
FuzzedInvariant ( lone n : NodeCachingLinkedList.header.*(previous) : n = null ) holds for: this
FuzzedInvariant ( lone n : NodeCachingLinkedList.header.^(previous) : n not in n.*(previous) ) holds for: this
FuzzedInvariant ( no n : NodeCachingLinkedList.firstCachedNode.*(next) : n in n.^(next) ) holds for: this
FuzzedInvariant ( no n : NodeCachingLinkedList.firstCachedNode.*(next) : n.value != n.previous.value ) holds for: this
FuzzedInvariant ( no n : NodeCachingLinkedList.firstCachedNode.*(previous + next) : n != n.previous.next ) holds for: this
FuzzedInvariant ( no n : NodeCachingLinkedList.firstCachedNode.*(previous + next) : n in n.^(previous + next) ) holds for: this
FuzzedInvariant ( no n : NodeCachingLinkedList.firstCachedNode.*(previous + next) : n not in n.*(previous + next) ) holds for: this
FuzzedInvariant ( no n : NodeCachingLinkedList.firstCachedNode.*(previous + next) : n.value != n.previous.value ) holds for: this
FuzzedInvariant ( no n : NodeCachingLinkedList.firstCachedNode.*(previous) : n = n.next.previous ) holds for: this
FuzzedInvariant ( no n : NodeCachingLinkedList.firstCachedNode.^(next) : n not in n.*(next) ) holds for: this
FuzzedInvariant ( no n : NodeCachingLinkedList.firstCachedNode.^(previous + next) : n = n.previous.previous ) holds for: this
FuzzedInvariant ( no n : NodeCachingLinkedList.firstCachedNode.^(previous + next) : n.value != n.previous.value ) holds for: this
FuzzedInvariant ( no n : NodeCachingLinkedList.firstCachedNode.^(previous) : n = n.previous.next ) holds for: this
FuzzedInvariant ( no n : NodeCachingLinkedList.firstCachedNode.^(previous) : n not in n.*(next) ) holds for: this
FuzzedInvariant ( no n : NodeCachingLinkedList.firstCachedNode.^(previous) : n.value != n.previous.value ) holds for: this
FuzzedInvariant ( no n : NodeCachingLinkedList.firstCachedNode.^(previous) : n.value = n.next.value ) holds for: this
FuzzedInvariant ( no n : NodeCachingLinkedList.header.*(previous) : n = null ) holds for: this
FuzzedInvariant ( no n : NodeCachingLinkedList.header.*(previous) : n not in n.^(previous + next) ) holds for: this
FuzzedInvariant ( one n : NodeCachingLinkedList.firstCachedNode.*(previous) : n not in n.^(previous) ) holds for: this
FuzzedInvariant ( some n : NodeCachingLinkedList.firstCachedNode.*(previous + next) : n in n.*(previous + next) ) holds for: this
FuzzedInvariant ( some n : NodeCachingLinkedList.header.*(previous + next) : n = n.next.previous ) holds for: this
FuzzedInvariant ( some n : NodeCachingLinkedList.header.*(previous) : n in n.^(previous) ) holds for: this
this.firstCachedNode.previous == null
this.firstCachedNode.next.previous == null
this.firstCachedNode.next.value == null
this.firstCachedNode.value == null
this.cacheSize >= 0
this.header != null
this.header.previous != null
this.header.previous.value.getClass().getName() == java.lang.String.class
this.header.next != null
this.header.next.value.getClass().getName() == java.lang.String.class
this.header.value == null
this.size >= 0
this.modCount >= 0
===========================================================================
DataStructures.commonscollections.AbstractLinkedList.addLast(java.lang.Object):::ENTER
this.header == this.header.previous.next
this.header == this.header.next.previous
this.header.previous.value.getClass().getName() == o.getClass().getName()
FuzzedInvariant ( #(NodeCachingLinkedList.firstCachedNode.^(previous)) != NodeCachingLinkedList.modCount ) holds for: this
FuzzedInvariant ( #(NodeCachingLinkedList.header.*(previous + next)) != NodeCachingLinkedList.modCount - #(NodeCachingLinkedList.firstCachedNode.^(previous)) ) holds for: this
FuzzedInvariant ( #(NodeCachingLinkedList.header.*(previous)) != NodeCachingLinkedList.modCount - 0 ) holds for: this
FuzzedInvariant ( #(NodeCachingLinkedList.header.^(next)) != NodeCachingLinkedList.maximumCacheSize ) holds for: this
FuzzedInvariant ( NodeCachingLinkedList.cacheSize != NodeCachingLinkedList.cacheSize + NodeCachingLinkedList.modCount ) holds for: this
FuzzedInvariant ( NodeCachingLinkedList.cacheSize != NodeCachingLinkedList.maximumCacheSize - 0 ) holds for: this
FuzzedInvariant ( NodeCachingLinkedList.cacheSize < NodeCachingLinkedList.modCount ) holds for: this
FuzzedInvariant ( NodeCachingLinkedList.maximumCacheSize != 0 ) holds for: this
FuzzedInvariant ( NodeCachingLinkedList.maximumCacheSize != NodeCachingLinkedList.size ) holds for: this
FuzzedInvariant ( NodeCachingLinkedList.modCount != NodeCachingLinkedList.cacheSize - 0 ) holds for: this
FuzzedInvariant ( NodeCachingLinkedList.modCount > NodeCachingLinkedList.cacheSize ) holds for: this
FuzzedInvariant ( NodeCachingLinkedList.modCount > NodeCachingLinkedList.cacheSize - 0 ) holds for: this
FuzzedInvariant ( NodeCachingLinkedList.size != NodeCachingLinkedList.maximumCacheSize ) holds for: this
this.header != null
this.header.previous.previous != null
this.header.next.next != null
o != null
o.getClass().getName() == java.lang.String.class
this.getClass().getName() != o.getClass().getName()
===========================================================================
DataStructures.commonscollections.AbstractLinkedList.addLast(java.lang.Object):::EXIT
this.header == this.header.previous.next
this.header == this.header.next.previous
this.header == orig(this.header)
this.header == orig(this.header.previous.next)
this.header == orig(this.header.next.previous)
this.header.previous.previous == orig(this.header.previous)
this.header.previous.value == orig(o)
this.header.previous.value.getClass().getName() == orig(o.getClass().getName())
this.header.next.value.getClass().getName() == orig(o.getClass().getName())
this.header.value == orig(this.header.value)
this.header != null
this.header.previous.previous != null
this.header.next.next != null
this.header.next.value != null
this.size >= 1
this.modCount >= 1
return == true
this.size - orig(this.size) - 1 == 0
this.modCount - orig(this.modCount) - 1 == 0
===========================================================================
DataStructures.commonscollections.AbstractLinkedList.addLast(java.lang.Object):::EXIT;condition="return == true"
FuzzedInvariant ( #(NodeCachingLinkedList.header.*(next)) > 0 ) holds for: orig(this)
FuzzedInvariant ( #(NodeCachingLinkedList.header.*(next)) > 0 ) holds for: orig(this)
FuzzedInvariant ( #(NodeCachingLinkedList.header.^(previous + next)) > #(NodeCachingLinkedList.firstCachedNode.^(previous)) ) holds for: orig(this)
FuzzedInvariant ( #(NodeCachingLinkedList.header.^(previous + next)) > #(NodeCachingLinkedList.firstCachedNode.^(previous)) ) holds for: orig(this)
FuzzedInvariant ( NodeCachingLinkedList.cacheSize >= 0 ) holds for: orig(this)
FuzzedInvariant ( NodeCachingLinkedList.cacheSize >= 0 ) holds for: orig(this)
FuzzedInvariant ( all n : NodeCachingLinkedList.firstCachedNode.*(next) : n.value = n.previous.value ) holds for: orig(this)
FuzzedInvariant ( all n : NodeCachingLinkedList.firstCachedNode.*(next) : n.value = n.previous.value ) holds for: orig(this)
FuzzedInvariant ( all n : NodeCachingLinkedList.firstCachedNode.^(previous) : n.value = n.next.value ) holds for: orig(this)
FuzzedInvariant ( all n : NodeCachingLinkedList.firstCachedNode.^(previous) : n.value = n.next.value ) holds for: orig(this)
FuzzedInvariant ( all n : NodeCachingLinkedList.firstCachedNode.^(previous) : n.value = n.next.value ) holds for: orig(this)
FuzzedInvariant ( all n : NodeCachingLinkedList.header.^(next) : n != null ) holds for: orig(this)
FuzzedInvariant ( all n : NodeCachingLinkedList.header.^(next) : n != null ) holds for: orig(this)
FuzzedInvariant ( all n : NodeCachingLinkedList.header.^(next) : n = n.next.previous ) holds for: orig(this)
FuzzedInvariant ( all n : NodeCachingLinkedList.header.^(next) : n = n.next.previous ) holds for: orig(this)
FuzzedInvariant ( lone n : NodeCachingLinkedList.firstCachedNode.*(previous + next) : n.value != n.next.value ) holds for: orig(this)
FuzzedInvariant ( lone n : NodeCachingLinkedList.firstCachedNode.*(previous + next) : n.value != n.next.value ) holds for: orig(this)
FuzzedInvariant ( no n : NodeCachingLinkedList.firstCachedNode.^(next) : n.value = n.previous.value ) holds for: orig(this)
FuzzedInvariant ( no n : NodeCachingLinkedList.firstCachedNode.^(next) : n.value = n.previous.value ) holds for: orig(this)
FuzzedInvariant ( no n : NodeCachingLinkedList.header.*(next) : n != n.next.previous ) holds for: orig(this)
FuzzedInvariant ( no n : NodeCachingLinkedList.header.*(next) : n != n.next.previous ) holds for: orig(this)
FuzzedInvariant ( some n : NodeCachingLinkedList.header.^(previous) : n != null ) holds for: orig(this)
FuzzedInvariant ( some n : NodeCachingLinkedList.header.^(previous) : n != null ) holds for: orig(this)
FuzzedInvariant ( some n : NodeCachingLinkedList.header.^(previous) : n != null ) holds for: orig(this)
