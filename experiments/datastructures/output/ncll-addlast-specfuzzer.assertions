===========================================================================
DataStructures.commonscollections.NodeCachingLinkedList:::OBJECT
this.header.previous.value.getClass().getName() == this.header.next.value.getClass().getName()
FuzzedInvariant ( #(NodeCachingLinkedList.firstCachedNode.*(previous + next)) = NodeCachingLinkedList.cacheSize ) holds for: this
FuzzedInvariant ( #(NodeCachingLinkedList.firstCachedNode.*(previous + next)) >= #(NodeCachingLinkedList.firstCachedNode.^(next)) + #(NodeCachingLinkedList.firstCachedNode.*(previous)) ) holds for: this
FuzzedInvariant ( #(NodeCachingLinkedList.firstCachedNode.*(previous)) <= #(NodeCachingLinkedList.firstCachedNode.*(previous)) - 0 ) holds for: this
FuzzedInvariant ( #(NodeCachingLinkedList.firstCachedNode.^(previous + next)) >= #(NodeCachingLinkedList.firstCachedNode.^(next)) - 0 ) holds for: this
FuzzedInvariant ( #(NodeCachingLinkedList.firstCachedNode.^(previous + next)) >= #(NodeCachingLinkedList.firstCachedNode.^(previous + next)) - NodeCachingLinkedList.modCount ) holds for: this
FuzzedInvariant ( #(NodeCachingLinkedList.header.*(previous + next)) >= 1 ) holds for: this
FuzzedInvariant ( #(NodeCachingLinkedList.header.^(next)) > 0 ) holds for: this
FuzzedInvariant ( #(NodeCachingLinkedList.header.^(previous + next)) > 0 ) holds for: this
FuzzedInvariant ( #(NodeCachingLinkedList.header.^(previous + next)) >= #(NodeCachingLinkedList.header.^(previous)) ) holds for: this
FuzzedInvariant ( #(NodeCachingLinkedList.header.^(previous)) != 0 ) holds for: this
FuzzedInvariant ( #(NodeCachingLinkedList.header.^(previous)) >= 0 ) holds for: this
FuzzedInvariant ( NodeCachingLinkedList.cacheSize > NodeCachingLinkedList.cacheSize - 1 ) holds for: this
FuzzedInvariant ( NodeCachingLinkedList.cacheSize >= 0 ) holds for: this
FuzzedInvariant ( NodeCachingLinkedList.maximumCacheSize >= NodeCachingLinkedList.maximumCacheSize - NodeCachingLinkedList.size ) holds for: this
FuzzedInvariant ( NodeCachingLinkedList.modCount >= NodeCachingLinkedList.modCount ) holds for: this
FuzzedInvariant ( NodeCachingLinkedList.size >= 0 ) holds for: this
FuzzedInvariant ( all n : NodeCachingLinkedList.firstCachedNode.*(next) : n in n.*(previous) ) holds for: this
FuzzedInvariant ( all n : NodeCachingLinkedList.firstCachedNode.*(next) : n.value != n.previous.value ) holds for: this
FuzzedInvariant ( all n : NodeCachingLinkedList.firstCachedNode.*(previous + next) : n != n.next.previous ) holds for: this
FuzzedInvariant ( all n : NodeCachingLinkedList.firstCachedNode.*(previous + next) : n = n.previous.next ) holds for: this
FuzzedInvariant ( all n : NodeCachingLinkedList.firstCachedNode.*(previous + next) : n in n.*(previous + next) ) holds for: this
FuzzedInvariant ( all n : NodeCachingLinkedList.firstCachedNode.*(previous + next) : n.value = n.next.value ) holds for: this
FuzzedInvariant ( all n : NodeCachingLinkedList.firstCachedNode.*(previous + next) : n.value = n.previous.value ) holds for: this
FuzzedInvariant ( all n : NodeCachingLinkedList.firstCachedNode.*(previous) : n.value != n.previous.value ) holds for: this
FuzzedInvariant ( all n : NodeCachingLinkedList.firstCachedNode.*(previous) : n.value = n.next.value ) holds for: this
FuzzedInvariant ( all n : NodeCachingLinkedList.firstCachedNode.^(next) : n.value = n.next.value ) holds for: this
FuzzedInvariant ( all n : NodeCachingLinkedList.firstCachedNode.^(next) : n.value = n.previous.value ) holds for: this
FuzzedInvariant ( all n : NodeCachingLinkedList.firstCachedNode.^(previous + next) : n = n.previous.previous ) holds for: this
FuzzedInvariant ( all n : NodeCachingLinkedList.firstCachedNode.^(previous + next) : n.value != n.previous.value ) holds for: this
FuzzedInvariant ( all n : NodeCachingLinkedList.firstCachedNode.^(previous) : n != n.next ) holds for: this
FuzzedInvariant ( all n : NodeCachingLinkedList.firstCachedNode.^(previous) : n.value != n.previous.value ) holds for: this
FuzzedInvariant ( all n : NodeCachingLinkedList.firstCachedNode.^(previous) : n.value = n.next.value ) holds for: this
FuzzedInvariant ( all n : NodeCachingLinkedList.header.*(next) : n in n.*(previous) ) holds for: this
FuzzedInvariant ( all n : NodeCachingLinkedList.header.*(previous + next) : n in n.*(previous + next) ) holds for: this
FuzzedInvariant ( all n : NodeCachingLinkedList.header.^(next) : n in n.*(next) ) holds for: this
FuzzedInvariant ( all n : NodeCachingLinkedList.header.^(next) : n in n.*(previous) ) holds for: this
FuzzedInvariant ( all n : NodeCachingLinkedList.header.^(previous) : n != null ) holds for: this
FuzzedInvariant ( no n : NodeCachingLinkedList.firstCachedNode.*(next) : n = n.next.previous ) holds for: this
FuzzedInvariant ( no n : NodeCachingLinkedList.firstCachedNode.*(next) : n = null ) holds for: this
FuzzedInvariant ( no n : NodeCachingLinkedList.firstCachedNode.*(next) : n in n.^(next) ) holds for: this
FuzzedInvariant ( no n : NodeCachingLinkedList.firstCachedNode.*(next) : n.value != n.next.value ) holds for: this
FuzzedInvariant ( no n : NodeCachingLinkedList.firstCachedNode.*(next) : n.value != n.previous.value ) holds for: this
FuzzedInvariant ( no n : NodeCachingLinkedList.firstCachedNode.*(next) : n.value = n.previous.value ) holds for: this
FuzzedInvariant ( no n : NodeCachingLinkedList.firstCachedNode.*(previous + next) : n not in n.*(next) ) holds for: this
FuzzedInvariant ( no n : NodeCachingLinkedList.firstCachedNode.*(previous + next) : n.value != n.next.value ) holds for: this
FuzzedInvariant ( no n : NodeCachingLinkedList.firstCachedNode.*(previous + next) : n.value != n.previous.value ) holds for: this
FuzzedInvariant ( no n : NodeCachingLinkedList.firstCachedNode.*(previous) : n = n.previous.next ) holds for: this
FuzzedInvariant ( no n : NodeCachingLinkedList.firstCachedNode.*(previous) : n = null ) holds for: this
FuzzedInvariant ( no n : NodeCachingLinkedList.firstCachedNode.*(previous) : n not in n.*(previous + next) ) holds for: this
FuzzedInvariant ( no n : NodeCachingLinkedList.firstCachedNode.*(previous) : n.value != n.previous.value ) holds for: this
FuzzedInvariant ( no n : NodeCachingLinkedList.firstCachedNode.^(next) : n.value != n.next.value ) holds for: this
FuzzedInvariant ( no n : NodeCachingLinkedList.firstCachedNode.^(next) : n.value != n.previous.value ) holds for: this
FuzzedInvariant ( no n : NodeCachingLinkedList.firstCachedNode.^(next) : n.value = n.previous.value ) holds for: this
FuzzedInvariant ( no n : NodeCachingLinkedList.firstCachedNode.^(previous + next) : n = n.previous.previous ) holds for: this
FuzzedInvariant ( no n : NodeCachingLinkedList.firstCachedNode.^(previous + next) : n = null ) holds for: this
FuzzedInvariant ( no n : NodeCachingLinkedList.firstCachedNode.^(previous + next) : n in n.^(previous + next) ) holds for: this
FuzzedInvariant ( no n : NodeCachingLinkedList.firstCachedNode.^(previous + next) : n.value != n.next.value ) holds for: this
FuzzedInvariant ( no n : NodeCachingLinkedList.firstCachedNode.^(previous + next) : n.value != n.previous.value ) holds for: this
FuzzedInvariant ( no n : NodeCachingLinkedList.firstCachedNode.^(previous) : n = n.previous.next ) holds for: this
FuzzedInvariant ( no n : NodeCachingLinkedList.firstCachedNode.^(previous) : n in n.*(previous) ) holds for: this
FuzzedInvariant ( no n : NodeCachingLinkedList.firstCachedNode.^(previous) : n in n.^(previous + next) ) holds for: this
FuzzedInvariant ( no n : NodeCachingLinkedList.firstCachedNode.^(previous) : n not in n.^(previous + next) ) holds for: this
FuzzedInvariant ( no n : NodeCachingLinkedList.firstCachedNode.^(previous) : n.value != n.next.value ) holds for: this
FuzzedInvariant ( no n : NodeCachingLinkedList.firstCachedNode.^(previous) : n.value != n.previous.value ) holds for: this
FuzzedInvariant ( no n : NodeCachingLinkedList.firstCachedNode.^(previous) : n.value = n.next.value ) holds for: this
FuzzedInvariant ( no n : NodeCachingLinkedList.header.*(next) : n not in n.*(previous) ) holds for: this
FuzzedInvariant ( no n : NodeCachingLinkedList.header.*(previous + next) : n = null ) holds for: this
FuzzedInvariant ( no n : NodeCachingLinkedList.header.*(previous) : n = null ) holds for: this
FuzzedInvariant ( no n : NodeCachingLinkedList.header.^(next) : n not in n.*(previous + next) ) holds for: this
FuzzedInvariant ( no n : NodeCachingLinkedList.header.^(previous + next) : n not in n.*(previous) ) holds for: this
FuzzedInvariant ( some n : NodeCachingLinkedList.header.*(previous + next) : n != null ) holds for: this
FuzzedInvariant ( some n : NodeCachingLinkedList.header.^(next) : n != null ) holds for: this
FuzzedInvariant ( some n : NodeCachingLinkedList.header.^(next) : n in n.*(next) ) holds for: this
FuzzedInvariant ( some n : NodeCachingLinkedList.header.^(next) : n in n.*(previous) ) holds for: this
FuzzedInvariant ( some n : NodeCachingLinkedList.header.^(previous) : n != null ) holds for: this
this.firstCachedNode.previous == null
this.firstCachedNode.next.previous == null
this.firstCachedNode.next.value == null
this.firstCachedNode.value == null
this.cacheSize >= 0
this.header != null
this.header.previous != null
this.header.previous.value.getClass().getName() == java.lang.String.class
this.header.next != null
this.header.next.value.getClass().getName() == java.lang.String.class
this.header.value == null
this.size >= 0
this.modCount >= 0
FuzzedInvariant ( #(NodeCachingLinkedList.firstCachedNode.*(next)) >= #(NodeCachingLinkedList.firstCachedNode.^(previous)) - Integer_Variable ) holds for: <this , DataStructures.commonscollections.NodeCachingLinkedList.DEFAULT_MAXIMUM_CACHE_SIZE>
FuzzedInvariant ( #(NodeCachingLinkedList.firstCachedNode.*(previous)) != #(NodeCachingLinkedList.firstCachedNode.*(next)) + Integer_Variable ) holds for: <this , DataStructures.commonscollections.NodeCachingLinkedList.DEFAULT_MAXIMUM_CACHE_SIZE>
FuzzedInvariant ( #(NodeCachingLinkedList.firstCachedNode.*(previous)) >= #(NodeCachingLinkedList.firstCachedNode.*(next)) - Integer_Variable ) holds for: <this , DataStructures.commonscollections.NodeCachingLinkedList.DEFAULT_MAXIMUM_CACHE_SIZE>
FuzzedInvariant ( #(NodeCachingLinkedList.firstCachedNode.^(next)) < #(NodeCachingLinkedList.firstCachedNode.*(next)) + Integer_Variable ) holds for: <this , DataStructures.commonscollections.NodeCachingLinkedList.DEFAULT_MAXIMUM_CACHE_SIZE>
FuzzedInvariant ( #(NodeCachingLinkedList.firstCachedNode.^(next)) > NodeCachingLinkedList.modCount - Integer_Variable ) holds for: <this , DataStructures.commonscollections.NodeCachingLinkedList.DEFAULT_MAXIMUM_CACHE_SIZE>
FuzzedInvariant ( #(NodeCachingLinkedList.firstCachedNode.^(previous + next)) != #(NodeCachingLinkedList.firstCachedNode.*(previous + next)) + Integer_Variable ) holds for: <this , DataStructures.commonscollections.NodeCachingLinkedList.DEFAULT_MAXIMUM_CACHE_SIZE>
FuzzedInvariant ( #(NodeCachingLinkedList.firstCachedNode.^(previous + next)) != #(NodeCachingLinkedList.firstCachedNode.^(previous + next)) + Integer_Variable ) holds for: <this , DataStructures.commonscollections.NodeCachingLinkedList.DEFAULT_MAXIMUM_CACHE_SIZE>
FuzzedInvariant ( #(NodeCachingLinkedList.firstCachedNode.^(previous + next)) != Integer_Variable ) holds for: <this , DataStructures.commonscollections.NodeCachingLinkedList.DEFAULT_MAXIMUM_CACHE_SIZE>
FuzzedInvariant ( #(NodeCachingLinkedList.firstCachedNode.^(previous)) != Integer_Variable ) holds for: <this , DataStructures.commonscollections.NodeCachingLinkedList.DEFAULT_MAXIMUM_CACHE_SIZE>
FuzzedInvariant ( #(NodeCachingLinkedList.firstCachedNode.^(previous)) <= Integer_Variable ) holds for: <this , DataStructures.commonscollections.NodeCachingLinkedList.DEFAULT_MAXIMUM_CACHE_SIZE>
FuzzedInvariant ( #(NodeCachingLinkedList.firstCachedNode.^(previous)) > #(NodeCachingLinkedList.firstCachedNode.^(previous + next)) - Integer_Variable ) holds for: <this , DataStructures.commonscollections.NodeCachingLinkedList.DEFAULT_MAXIMUM_CACHE_SIZE>
FuzzedInvariant ( #(NodeCachingLinkedList.header.*(next)) <= Integer_Variable ) holds for: <this , DataStructures.commonscollections.NodeCachingLinkedList.DEFAULT_MAXIMUM_CACHE_SIZE>
FuzzedInvariant ( #(NodeCachingLinkedList.header.*(previous)) <= Integer_Variable ) holds for: <this , DataStructures.commonscollections.NodeCachingLinkedList.DEFAULT_MAXIMUM_CACHE_SIZE>
FuzzedInvariant ( #(NodeCachingLinkedList.header.^(next)) != Integer_Variable ) holds for: <this , DataStructures.commonscollections.NodeCachingLinkedList.DEFAULT_MAXIMUM_CACHE_SIZE>
FuzzedInvariant ( #(NodeCachingLinkedList.header.^(next)) < Integer_Variable ) holds for: <this , DataStructures.commonscollections.NodeCachingLinkedList.DEFAULT_MAXIMUM_CACHE_SIZE>
FuzzedInvariant ( #(NodeCachingLinkedList.header.^(previous + next)) > #(NodeCachingLinkedList.header.*(previous + next)) - Integer_Variable ) holds for: <this , DataStructures.commonscollections.NodeCachingLinkedList.DEFAULT_MAXIMUM_CACHE_SIZE>
FuzzedInvariant ( #(NodeCachingLinkedList.header.^(previous + next)) > NodeCachingLinkedList.cacheSize - Integer_Variable ) holds for: <this , DataStructures.commonscollections.NodeCachingLinkedList.DEFAULT_MAXIMUM_CACHE_SIZE>
FuzzedInvariant ( #(NodeCachingLinkedList.header.^(previous)) != Integer_Variable ) holds for: <this , DataStructures.commonscollections.NodeCachingLinkedList.DEFAULT_MAXIMUM_CACHE_SIZE>
FuzzedInvariant ( NodeCachingLinkedList.cacheSize != NodeCachingLinkedList.modCount - Integer_Variable ) holds for: <this , DataStructures.commonscollections.NodeCachingLinkedList.DEFAULT_MAXIMUM_CACHE_SIZE>
FuzzedInvariant ( NodeCachingLinkedList.cacheSize <= Integer_Variable ) holds for: <this , DataStructures.commonscollections.NodeCachingLinkedList.DEFAULT_MAXIMUM_CACHE_SIZE>
FuzzedInvariant ( NodeCachingLinkedList.modCount != Integer_Variable ) holds for: <this , DataStructures.commonscollections.NodeCachingLinkedList.DEFAULT_MAXIMUM_CACHE_SIZE>
FuzzedInvariant ( NodeCachingLinkedList.modCount < #(NodeCachingLinkedList.header.^(next)) + Integer_Variable ) holds for: <this , DataStructures.commonscollections.NodeCachingLinkedList.DEFAULT_MAXIMUM_CACHE_SIZE>
FuzzedInvariant ( NodeCachingLinkedList.modCount < Integer_Variable ) holds for: <this , DataStructures.commonscollections.NodeCachingLinkedList.DEFAULT_MAXIMUM_CACHE_SIZE>
FuzzedInvariant ( NodeCachingLinkedList.size < Integer_Variable ) holds for: <this , DataStructures.commonscollections.NodeCachingLinkedList.DEFAULT_MAXIMUM_CACHE_SIZE>
FuzzedInvariant ( NodeCachingLinkedList.size < NodeCachingLinkedList.size + Integer_Variable ) holds for: <this , DataStructures.commonscollections.NodeCachingLinkedList.DEFAULT_MAXIMUM_CACHE_SIZE>
FuzzedInvariant ( NodeCachingLinkedList.size <= Integer_Variable ) holds for: <this , DataStructures.commonscollections.NodeCachingLinkedList.DEFAULT_MAXIMUM_CACHE_SIZE>
FuzzedInvariant ( NodeCachingLinkedList.size >= #(NodeCachingLinkedList.firstCachedNode.^(previous + next)) - Integer_Variable ) holds for: <this , DataStructures.commonscollections.NodeCachingLinkedList.DEFAULT_MAXIMUM_CACHE_SIZE>
FuzzedInvariant ( NodeCachingLinkedList.maximumCacheSize = Integer_Variable ) holds for: <this , this.maximumCacheSize>
FuzzedInvariant ( NodeCachingLinkedList.maximumCacheSize >= Integer_Variable ) holds for: <this , this.maximumCacheSize>
===========================================================================
DataStructures.commonscollections.AbstractLinkedList.addLast(java.lang.Object):::ENTER
this.header == this.header.previous.next
this.header == this.header.next.previous
this.header.previous.value.getClass().getName() == o.getClass().getName()
this.header != null
this.header.previous.previous != null
this.header.next.next != null
o != null
o.getClass().getName() == java.lang.String.class
this.getClass().getName() != o.getClass().getName()
===========================================================================
DataStructures.commonscollections.AbstractLinkedList.addLast(java.lang.Object):::EXIT
this.header == this.header.previous.next
this.header == this.header.next.previous
this.header == orig(this.header)
this.header == orig(this.header.previous.next)
this.header == orig(this.header.next.previous)
this.header.previous.previous == orig(this.header.previous)
this.header.previous.value == orig(o)
this.header.previous.value.getClass().getName() == orig(o.getClass().getName())
this.header.next.value.getClass().getName() == orig(o.getClass().getName())
this.header.value == orig(this.header.value)
this.header != null
this.header.previous.previous != null
this.header.next.next != null
this.header.next.value != null
this.size >= 1
this.modCount >= 1
return == true
this.size - orig(this.size) - 1 == 0
this.modCount - orig(this.modCount) - 1 == 0
===========================================================================
DataStructures.commonscollections.AbstractLinkedList.addLast(java.lang.Object):::EXIT;condition="return == true"
