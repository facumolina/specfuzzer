===========================================================================
DataStructures.korat.binarysearchtree.SearchTree:::OBJECT
FuzzedInvariant ( #(SearchTree.root.*(right)) >= 0 ) holds for: this
FuzzedInvariant ( #(SearchTree.root.^(right)) <= #(SearchTree.root.^(left + right)) + #(SearchTree.root.^(right)) ) holds for: this
FuzzedInvariant ( all n : SearchTree.root.*(left) : n != null ) holds for: this
FuzzedInvariant ( all n : SearchTree.root.*(right) : n != n.left.right ) holds for: this
FuzzedInvariant ( all n : SearchTree.root.^(left + right) : n != n.left.left ) holds for: this
FuzzedInvariant ( all n : SearchTree.root.^(right) : n.info != n.left.info ) holds for: this
FuzzedInvariant ( all n : SearchTree.root.^(right) : n.info >= n.left.info ) holds for: this
FuzzedInvariant ( no n : SearchTree.root.*(left + right) : n.info <= n.left.info ) holds for: this
FuzzedInvariant ( no n : SearchTree.root.*(left) : n in n.^(left + right) ) holds for: this
FuzzedInvariant ( no n : SearchTree.root.*(right) : n = n.right.left ) holds for: this
FuzzedInvariant ( no n : SearchTree.root.^(left) : n in n.^(left) ) holds for: this
this.size >= 0
this.root.left.info < this.root.right.info
this.root.left.info < this.root.info
this.root.right.info >= this.root.info
===========================================================================
DataStructures.korat.binarysearchtree.SearchTree.insert(int):::ENTER
this.root.left.info != 0
===========================================================================
DataStructures.korat.binarysearchtree.SearchTree.insert(int):::EXIT
this.root.left.info == orig(this.root.left.info)
this.root.right.info == orig(this.root.right.info)
this.root.info == orig(this.root.info)
this.root != null
this.size >= 1
FuzzedInvariant ( #(SearchTree.root.^(right)) != #(SearchTree.root.*(left + right)) + SearchTree.size ) holds for: orig(this)
FuzzedInvariant ( SearchTree.root.info >= SearchTree.root.info ) holds for: orig(this)
FuzzedInvariant ( some n : SearchTree.root.*(left + right) : n != n.right ) holds for: orig(this)
this.root.left.info < orig(this.root.right.info)
this.root.left.info < orig(this.root.info)
this.root.right.info > orig(this.root.left.info)
this.root.right.info >= orig(this.root.info)
FuzzedInvariant ( Integer_Variable in SearchTree.root.*(left + right).info ) holds for: <this.root.info , orig(this)>
FuzzedInvariant ( Integer_Variable in SearchTree.root.*(left).info ) holds for: <this.root.info , orig(this)>
FuzzedInvariant ( Integer_Variable in SearchTree.root.*(right).info ) holds for: <this.root.info , orig(this)>
FuzzedInvariant ( Integer_Variable not in SearchTree.root.^(left).info ) holds for: <this.root.info , orig(this)>
FuzzedInvariant ( SearchTree.root.info = Integer_Variable ) holds for: <this.root.info , orig(this)>
FuzzedInvariant ( SearchTree.size != Integer_Variable ) holds for: <this.root.info , orig(this)>
this.root.info > orig(this.root.left.info)
this.root.info <= orig(this.root.right.info)
FuzzedInvariant ( #(SearchTree.root.^(left + right)) != Integer_Variable ) holds for: <this.size , orig(this)>
FuzzedInvariant ( #(SearchTree.root.^(right)) < Integer_Variable ) holds for: <this.size , orig(this)>
FuzzedInvariant ( SearchTree.root.info != Integer_Variable ) holds for: <this.size , orig(this)>
FuzzedInvariant ( SearchTree.size >= Integer_Variable ) holds for: <this.size , orig(this)>
this.size - orig(this.size) - 1 == 0
FuzzedInvariant ( Integer_Variable in SearchTree.root.*(left + right).info ) holds for: <orig(this) , orig(value)>
